// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: incidents.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createIncident = `-- name: CreateIncident :one
INSERT INTO incidents (id, created_at, updated_at, short_description, description, state, configuration_item_id, company_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to
`

type CreateIncidentParams struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	State               StateEnum
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
}

func (q *Queries) CreateIncident(ctx context.Context, arg CreateIncidentParams) (Incident, error) {
	row := q.db.QueryRowContext(ctx, createIncident,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ShortDescription,
		arg.Description,
		arg.State,
		arg.ConfigurationItemID,
		arg.CompanyID,
	)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.ConfigurationItemID,
		&i.CompanyID,
		&i.State,
		&i.AssignedTo,
	)
	return i, err
}

const deleteIncidentByID = `-- name: DeleteIncidentByID :one
DELETE FROM incidents 
WHERE id = $1
RETURNING id, created_at, updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to
`

func (q *Queries) DeleteIncidentByID(ctx context.Context, id uuid.UUID) (Incident, error) {
	row := q.db.QueryRowContext(ctx, deleteIncidentByID, id)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.ConfigurationItemID,
		&i.CompanyID,
		&i.State,
		&i.AssignedTo,
	)
	return i, err
}

const getIncidentByID = `-- name: GetIncidentByID :one
SELECT id, created_at, updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to FROM incidents WHERE id = $1
`

func (q *Queries) GetIncidentByID(ctx context.Context, id uuid.UUID) (Incident, error) {
	row := q.db.QueryRowContext(ctx, getIncidentByID, id)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.ConfigurationItemID,
		&i.CompanyID,
		&i.State,
		&i.AssignedTo,
	)
	return i, err
}

const getIncidentById = `-- name: GetIncidentById :one
SELECT incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, apikey, email, password FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
WHERE incidents.id = $1
`

type GetIncidentByIdRow struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Apikey              sql.NullString
	Email               sql.NullString
	Password            sql.NullString
}

func (q *Queries) GetIncidentById(ctx context.Context, id uuid.UUID) (GetIncidentByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getIncidentById, id)
	var i GetIncidentByIdRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.ConfigurationItemID,
		&i.CompanyID,
		&i.State,
		&i.AssignedTo,
		&i.ID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.FirstName,
		&i.LastName,
		&i.Apikey,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getIncidents = `-- name: GetIncidents :many
SELECT incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, apikey, email, password FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
WHERE (short_description ILIKE '%' || $3 || '%' or $3 is NULL)
OR (description ILIKE '%' || $3 || '%' or $3 is NULL)
OR (incidents.id::text ILIKE '%' || $3 || '%' or $3 is NULL)
ORDER BY incidents.updated_at DESC
LIMIT $1 OFFSET $2
`

type GetIncidentsParams struct {
	Limit  int32
	Offset int32
	Query  sql.NullString
}

type GetIncidentsRow struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Apikey              sql.NullString
	Email               sql.NullString
	Password            sql.NullString
}

func (q *Queries) GetIncidents(ctx context.Context, arg GetIncidentsParams) ([]GetIncidentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncidents, arg.Limit, arg.Offset, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIncidentsRow
	for rows.Next() {
		var i GetIncidentsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShortDescription,
			&i.Description,
			&i.ConfigurationItemID,
			&i.CompanyID,
			&i.State,
			&i.AssignedTo,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.FirstName,
			&i.LastName,
			&i.Apikey,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncidentsAsc = `-- name: GetIncidentsAsc :many
SELECT incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, apikey, email, password FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
ORDER BY $1 ASC, id ASC
`

type GetIncidentsAscRow struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Apikey              sql.NullString
	Email               sql.NullString
	Password            sql.NullString
}

func (q *Queries) GetIncidentsAsc(ctx context.Context, dollar_1 interface{}) ([]GetIncidentsAscRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncidentsAsc, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIncidentsAscRow
	for rows.Next() {
		var i GetIncidentsAscRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShortDescription,
			&i.Description,
			&i.ConfigurationItemID,
			&i.CompanyID,
			&i.State,
			&i.AssignedTo,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.FirstName,
			&i.LastName,
			&i.Apikey,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncidentsBySearchTerm = `-- name: GetIncidentsBySearchTerm :many
SELECT incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, apikey, email, password FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
WHERE short_description like $1
ORDER BY incidents.updated_at DESC
`

type GetIncidentsBySearchTermRow struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Apikey              sql.NullString
	Email               sql.NullString
	Password            sql.NullString
}

func (q *Queries) GetIncidentsBySearchTerm(ctx context.Context, shortDescription string) ([]GetIncidentsBySearchTermRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncidentsBySearchTerm, shortDescription)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIncidentsBySearchTermRow
	for rows.Next() {
		var i GetIncidentsBySearchTermRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShortDescription,
			&i.Description,
			&i.ConfigurationItemID,
			&i.CompanyID,
			&i.State,
			&i.AssignedTo,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.FirstName,
			&i.LastName,
			&i.Apikey,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncidentsBySearchTermLimitOffset = `-- name: GetIncidentsBySearchTermLimitOffset :many
SELECT incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, apikey, email, password, count(*) OVER() AS full_count 
FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
WHERE short_description like $1 or short_description is NULL
ORDER BY incidents.updated_at DESC
LIMIT $2 OFFSET $3
`

type GetIncidentsBySearchTermLimitOffsetParams struct {
	ShortDescription string
	Limit            int32
	Offset           int32
}

type GetIncidentsBySearchTermLimitOffsetRow struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Apikey              sql.NullString
	Email               sql.NullString
	Password            sql.NullString
	FullCount           int64
}

func (q *Queries) GetIncidentsBySearchTermLimitOffset(ctx context.Context, arg GetIncidentsBySearchTermLimitOffsetParams) ([]GetIncidentsBySearchTermLimitOffsetRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncidentsBySearchTermLimitOffset, arg.ShortDescription, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIncidentsBySearchTermLimitOffsetRow
	for rows.Next() {
		var i GetIncidentsBySearchTermLimitOffsetRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShortDescription,
			&i.Description,
			&i.ConfigurationItemID,
			&i.CompanyID,
			&i.State,
			&i.AssignedTo,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.FirstName,
			&i.LastName,
			&i.Apikey,
			&i.Email,
			&i.Password,
			&i.FullCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncidentsCount = `-- name: GetIncidentsCount :one
SELECT count(*) FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
WHERE (short_description ILIKE '%' || $1 || '%' or $1 is NULL)
OR (description ILIKE '%' || $1 || '%' or $1 is NULL)
OR (incidents.id::text ILIKE '%' || $1 || '%' or $1 is NULL)
`

func (q *Queries) GetIncidentsCount(ctx context.Context, query sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, getIncidentsCount, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getIncidentsDesc = `-- name: GetIncidentsDesc :many
SELECT incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, apikey, email, password FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
ORDER BY $1 DESC, id ASC
`

type GetIncidentsDescRow struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Apikey              sql.NullString
	Email               sql.NullString
	Password            sql.NullString
}

func (q *Queries) GetIncidentsDesc(ctx context.Context, dollar_1 interface{}) ([]GetIncidentsDescRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncidentsDesc, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIncidentsDescRow
	for rows.Next() {
		var i GetIncidentsDescRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShortDescription,
			&i.Description,
			&i.ConfigurationItemID,
			&i.CompanyID,
			&i.State,
			&i.AssignedTo,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.FirstName,
			&i.LastName,
			&i.Apikey,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncidentsLatest = `-- name: GetIncidentsLatest :many
SELECT incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, apikey, email, password FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
ORDER BY incidents.updated_at DESC
LIMIT $1 OFFSET $2
`

type GetIncidentsLatestParams struct {
	Limit  int32
	Offset int32
}

type GetIncidentsLatestRow struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Apikey              sql.NullString
	Email               sql.NullString
	Password            sql.NullString
}

func (q *Queries) GetIncidentsLatest(ctx context.Context, arg GetIncidentsLatestParams) ([]GetIncidentsLatestRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncidentsLatest, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIncidentsLatestRow
	for rows.Next() {
		var i GetIncidentsLatestRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShortDescription,
			&i.Description,
			&i.ConfigurationItemID,
			&i.CompanyID,
			&i.State,
			&i.AssignedTo,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.FirstName,
			&i.LastName,
			&i.Apikey,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIncident = `-- name: UpdateIncident :one
UPDATE incidents
SET updated_at = $2, 
company_id = $3,
configuration_item_id = $4,
description = $5, 
short_description = $6, 
state = $7,
assigned_to = $8
WHERE ID = $1
RETURNING id, created_at, updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to
`

type UpdateIncidentParams struct {
	ID                  uuid.UUID
	UpdatedAt           time.Time
	CompanyID           uuid.UUID
	ConfigurationItemID uuid.UUID
	Description         sql.NullString
	ShortDescription    string
	State               StateEnum
	AssignedTo          uuid.NullUUID
}

func (q *Queries) UpdateIncident(ctx context.Context, arg UpdateIncidentParams) (Incident, error) {
	row := q.db.QueryRowContext(ctx, updateIncident,
		arg.ID,
		arg.UpdatedAt,
		arg.CompanyID,
		arg.ConfigurationItemID,
		arg.Description,
		arg.ShortDescription,
		arg.State,
		arg.AssignedTo,
	)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.ConfigurationItemID,
		&i.CompanyID,
		&i.State,
		&i.AssignedTo,
	)
	return i, err
}
