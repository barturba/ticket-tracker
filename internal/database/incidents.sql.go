// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: incidents.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countIncidents = `-- name: CountIncidents :one
SELECT count(*) FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
WHERE (short_description ILIKE '%' || $1 || '%' or $1 is NULL)
OR (description ILIKE '%' || $1 || '%' or $1 is NULL)
OR (incidents.id::text ILIKE '%' || $1 || '%' or $1 is NULL)
`

func (q *Queries) CountIncidents(ctx context.Context, query sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countIncidents, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createIncident = `-- name: CreateIncident :one
INSERT INTO incidents (id, created_at, updated_at, short_description, description, state, configuration_item_id, company_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to
`

type CreateIncidentParams struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	State               StateEnum
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
}

func (q *Queries) CreateIncident(ctx context.Context, arg CreateIncidentParams) (Incident, error) {
	row := q.db.QueryRowContext(ctx, createIncident,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ShortDescription,
		arg.Description,
		arg.State,
		arg.ConfigurationItemID,
		arg.CompanyID,
	)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.ConfigurationItemID,
		&i.CompanyID,
		&i.State,
		&i.AssignedTo,
	)
	return i, err
}

const deleteIncident = `-- name: DeleteIncident :one
DELETE FROM incidents 
WHERE id = $1
RETURNING id, created_at, updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to
`

func (q *Queries) DeleteIncident(ctx context.Context, id uuid.UUID) (Incident, error) {
	row := q.db.QueryRowContext(ctx, deleteIncident, id)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.ConfigurationItemID,
		&i.CompanyID,
		&i.State,
		&i.AssignedTo,
	)
	return i, err
}

const getIncident = `-- name: GetIncident :one
SELECT incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, email, "emailVerified", name, image, role, active FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
WHERE incidents.id = $1
`

type GetIncidentRow struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Email               sql.NullString
	EmailVerified       sql.NullTime
	Name                sql.NullString
	Image               sql.NullString
	Role                sql.NullString
	Active              sql.NullBool
}

func (q *Queries) GetIncident(ctx context.Context, id uuid.UUID) (GetIncidentRow, error) {
	row := q.db.QueryRowContext(ctx, getIncident, id)
	var i GetIncidentRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.ConfigurationItemID,
		&i.CompanyID,
		&i.State,
		&i.AssignedTo,
		&i.ID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const listIncidents = `-- name: ListIncidents :many
SELECT count(*) OVER(), incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, email, "emailVerified", name, image, role, active FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
WHERE (incidents.short_description ILIKE '%' || $3 || '%' or $3 is NULL)
OR (incidents.description ILIKE '%' || $3 || '%' or $3 is NULL)
OR (incidents.id::text ILIKE '%' || $3 || '%' or $3 is NULL)
ORDER BY
CASE WHEN ($4::varchar = 'created_at' AND $5::varchar = 'ASC') THEN incidents.created_at END ASC,
CASE WHEN ($4::varchar = 'created_at' AND $5::varchar = 'DESC') THEN incidents.created_at END DESC,
CASE WHEN ($4::varchar = 'updated_at' AND $5::varchar = 'ASC') THEN incidents.updated_at END ASC,
CASE WHEN ($4::varchar = 'updated_at' AND $5::varchar = 'DESC') THEN incidents.updated_at END DESC,
CASE WHEN ($4::varchar = 'id' AND $5::varchar = 'ASC') THEN incidents.id END ASC,
CASE WHEN ($4::varchar = 'id' AND $5::varchar = 'DESC') THEN incidents.id END DESC,
CASE WHEN ($4::varchar = 'short_description' AND $5::varchar = 'ASC') THEN incidents.short_description END ASC,
CASE WHEN ($4::varchar = 'short_description' AND $5::varchar = 'DESC') THEN incidents.short_description END DESC,
CASE WHEN ($4::varchar = 'description' AND $5::varchar = 'ASC') THEN incidents.description END ASC,
CASE WHEN ($4::varchar = 'description' AND $5::varchar = 'DESC') THEN incidents.description END DESC,
CASE WHEN ($4::varchar = 'first_name' AND $5::varchar = 'ASC') THEN first_name END ASC,
CASE WHEN ($4::varchar = 'first_name' AND $5::varchar = 'DESC') THEN first_name END DESC,
CASE WHEN ($4::varchar = 'last_name' AND $5::varchar = 'ASC') THEN last_name END ASC,
CASE WHEN ($4::varchar = 'last_name' AND $5::varchar = 'DESC') THEN last_name END DESC,
incidents.id ASC 
LIMIT $1 OFFSET $2
`

type ListIncidentsParams struct {
	Limit    int32
	Offset   int32
	Query    sql.NullString
	OrderBy  string
	OrderDir string
}

type ListIncidentsRow struct {
	Count               int64
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Email               sql.NullString
	EmailVerified       sql.NullTime
	Name                sql.NullString
	Image               sql.NullString
	Role                sql.NullString
	Active              sql.NullBool
}

func (q *Queries) ListIncidents(ctx context.Context, arg ListIncidentsParams) ([]ListIncidentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listIncidents,
		arg.Limit,
		arg.Offset,
		arg.Query,
		arg.OrderBy,
		arg.OrderDir,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListIncidentsRow
	for rows.Next() {
		var i ListIncidentsRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShortDescription,
			&i.Description,
			&i.ConfigurationItemID,
			&i.CompanyID,
			&i.State,
			&i.AssignedTo,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.EmailVerified,
			&i.Name,
			&i.Image,
			&i.Role,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentIncidents = `-- name: ListRecentIncidents :many
SELECT incidents.id, incidents.created_at, incidents.updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to, users.id, users.created_at, users.updated_at, first_name, last_name, email, "emailVerified", name, image, role, active FROM incidents
LEFT JOIN users
ON incidents.assigned_to = users.id
ORDER BY incidents.updated_at DESC
LIMIT $1 OFFSET $2
`

type ListRecentIncidentsParams struct {
	Limit  int32
	Offset int32
}

type ListRecentIncidentsRow struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	Description         sql.NullString
	ConfigurationItemID uuid.UUID
	CompanyID           uuid.UUID
	State               StateEnum
	AssignedTo          uuid.NullUUID
	ID_2                uuid.NullUUID
	CreatedAt_2         sql.NullTime
	UpdatedAt_2         sql.NullTime
	FirstName           sql.NullString
	LastName            sql.NullString
	Email               sql.NullString
	EmailVerified       sql.NullTime
	Name                sql.NullString
	Image               sql.NullString
	Role                sql.NullString
	Active              sql.NullBool
}

func (q *Queries) ListRecentIncidents(ctx context.Context, arg ListRecentIncidentsParams) ([]ListRecentIncidentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecentIncidents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecentIncidentsRow
	for rows.Next() {
		var i ListRecentIncidentsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShortDescription,
			&i.Description,
			&i.ConfigurationItemID,
			&i.CompanyID,
			&i.State,
			&i.AssignedTo,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.EmailVerified,
			&i.Name,
			&i.Image,
			&i.Role,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIncident = `-- name: UpdateIncident :one
UPDATE incidents
SET updated_at = $2, 
company_id = $3,
configuration_item_id = $4,
description = $5, 
short_description = $6, 
state = $7,
assigned_to = $8
WHERE ID = $1
RETURNING id, created_at, updated_at, short_description, description, configuration_item_id, company_id, state, assigned_to
`

type UpdateIncidentParams struct {
	ID                  uuid.UUID
	UpdatedAt           time.Time
	CompanyID           uuid.UUID
	ConfigurationItemID uuid.UUID
	Description         sql.NullString
	ShortDescription    string
	State               StateEnum
	AssignedTo          uuid.NullUUID
}

func (q *Queries) UpdateIncident(ctx context.Context, arg UpdateIncidentParams) (Incident, error) {
	row := q.db.QueryRowContext(ctx, updateIncident,
		arg.ID,
		arg.UpdatedAt,
		arg.CompanyID,
		arg.ConfigurationItemID,
		arg.Description,
		arg.ShortDescription,
		arg.State,
		arg.AssignedTo,
	)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.ConfigurationItemID,
		&i.CompanyID,
		&i.State,
		&i.AssignedTo,
	)
	return i, err
}
