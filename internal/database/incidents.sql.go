// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: incidents.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createIncident = `-- name: CreateIncident :one
INSERT INTO incidents (id, created_at, updated_at, short_description, organization_id, configuration_item_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, short_description, description, organization_id, configuration_item_id
`

type CreateIncidentParams struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ShortDescription    string
	OrganizationID      uuid.UUID
	ConfigurationItemID uuid.UUID
}

func (q *Queries) CreateIncident(ctx context.Context, arg CreateIncidentParams) (Incident, error) {
	row := q.db.QueryRowContext(ctx, createIncident,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ShortDescription,
		arg.OrganizationID,
		arg.ConfigurationItemID,
	)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShortDescription,
		&i.Description,
		&i.OrganizationID,
		&i.ConfigurationItemID,
	)
	return i, err
}

const getIncidentsByOrganizationID = `-- name: GetIncidentsByOrganizationID :many
SELECT id, created_at, updated_at, short_description, description, organization_id, configuration_item_id FROM incidents
WHERE organization_id = $1
`

func (q *Queries) GetIncidentsByOrganizationID(ctx context.Context, organizationID uuid.UUID) ([]Incident, error) {
	rows, err := q.db.QueryContext(ctx, getIncidentsByOrganizationID, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Incident
	for rows.Next() {
		var i Incident
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShortDescription,
			&i.Description,
			&i.OrganizationID,
			&i.ConfigurationItemID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
