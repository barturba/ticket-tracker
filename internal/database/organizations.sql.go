// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organizations.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO ORGANIZATIONS (id, created_at, updated_at, name, user_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, user_id
`

type CreateOrganizationParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	UserID    uuid.UUID
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, createOrganization,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.UserID,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const getOrganizationByUserID = `-- name: GetOrganizationByUserID :one
SELECT id, created_at, updated_at, name, user_id FROM ORGANIZATIONS WHERE USER_ID = $1
`

func (q *Queries) GetOrganizationByUserID(ctx context.Context, userID uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByUserID, userID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const updateOrganizationByUserID = `-- name: UpdateOrganizationByUserID :one
UPDATE ORGANIZATIONS
SET UPDATED_AT = $2, NAME = $3
WHERE USER_ID = $1
RETURNING id, created_at, updated_at, name, user_id
`

type UpdateOrganizationByUserIDParams struct {
	UserID    uuid.UUID
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) UpdateOrganizationByUserID(ctx context.Context, arg UpdateOrganizationByUserIDParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, updateOrganizationByUserID, arg.UserID, arg.UpdatedAt, arg.Name)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}
