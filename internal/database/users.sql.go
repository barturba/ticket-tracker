// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countUsers = `-- name: CountUsers :one
SELECT count(*) FROM users 
WHERE (first_name ILIKE '%' || $1 || '%' or $1 is NULL)
OR (last_name ILIKE '%' || $1 || '%' or $1 is NULL)
`

func (q *Queries) CountUsers(ctx context.Context, query sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO USERS (id, created_at, updated_at, first_name, last_name, email)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role, active
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FirstName sql.NullString
	LastName  sql.NullString
	Email     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users 
WHERE id = $1
RETURNING id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role, active
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role, active FROM USERS WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const getUserByTkn = `-- name: GetUserByTkn :one
SELECT users.id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role, active, sessions.id, "userId", expires, "sessionToken" FROM users
INNER JOIN sessions
ON users.id = sessions."userId"
WHERE sessions."sessionToken" = $1
`

type GetUserByTknRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	FirstName     sql.NullString
	LastName      sql.NullString
	Email         string
	EmailVerified sql.NullTime
	Name          sql.NullString
	Image         sql.NullString
	Role          string
	Active        sql.NullBool
	ID_2          uuid.UUID
	UserId        uuid.UUID
	Expires       time.Time
	SessionToken  string
}

func (q *Queries) GetUserByTkn(ctx context.Context, sessiontoken string) (GetUserByTknRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByTkn, sessiontoken)
	var i GetUserByTknRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
		&i.Active,
		&i.ID_2,
		&i.UserId,
		&i.Expires,
		&i.SessionToken,
	)
	return i, err
}

const listRecentUsers = `-- name: ListRecentUsers :many
SELECT id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role, active FROM users 
ORDER BY users.updated_at DESC
LIMIT $1 OFFSET $2
`

type ListRecentUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListRecentUsers(ctx context.Context, arg ListRecentUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listRecentUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.EmailVerified,
			&i.Name,
			&i.Image,
			&i.Role,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT count(*) OVER(), id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role, active FROM users 
WHERE (email ILIKE '%' || $3 || '%' or $3 is NULL)
OR (first_name ILIKE '%' || $3 || '%' or $3 is NULL)
OR (last_name ILIKE '%' || $3 || '%' or $3 is NULL)
ORDER BY
CASE WHEN ($4::varchar = 'id' AND $5::varchar = 'ASC') THEN id END ASC,
CASE WHEN ($4::varchar = 'id' AND $5::varchar = 'DESC') THEN id END DESC,
CASE WHEN ($4::varchar = 'created_at' AND $5::varchar = 'ASC') THEN created_at END ASC,
CASE WHEN ($4::varchar = 'created_at' AND $5::varchar = 'DESC') THEN created_at END DESC,
CASE WHEN ($4::varchar = 'updated_at' AND $5::varchar = 'ASC') THEN updated_at END ASC,
CASE WHEN ($4::varchar = 'updated_at' AND $5::varchar = 'DESC') THEN updated_at END DESC,
CASE WHEN ($4::varchar = 'last_name' AND $5::varchar = 'ASC') THEN last_name END ASC,
CASE WHEN ($4::varchar = 'last_name' AND $5::varchar = 'DESC') THEN last_name END DESC,
CASE WHEN ($4::varchar = 'first_name' AND $5::varchar = 'ASC') THEN first_name END ASC,
CASE WHEN ($4::varchar = 'first_name' AND $5::varchar = 'DESC') THEN first_name END DESC,
id ASC 
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit    int32
	Offset   int32
	Query    sql.NullString
	OrderBy  string
	OrderDir string
}

type ListUsersRow struct {
	Count         int64
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	FirstName     sql.NullString
	LastName      sql.NullString
	Email         string
	EmailVerified sql.NullTime
	Name          sql.NullString
	Image         sql.NullString
	Role          string
	Active        sql.NullBool
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers,
		arg.Limit,
		arg.Offset,
		arg.Query,
		arg.OrderBy,
		arg.OrderDir,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.EmailVerified,
			&i.Name,
			&i.Image,
			&i.Role,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET updated_at = $2, 
first_name = $3,
last_name = $4,
email = $5
WHERE ID = $1
RETURNING id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role, active
`

type UpdateUserParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	FirstName sql.NullString
	LastName  sql.NullString
	Email     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.UpdatedAt,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
		&i.Active,
	)
	return i, err
}
