// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countUsers = `-- name: CountUsers :one
SELECT count(*) FROM users 
WHERE (first_name ILIKE '%' || $1 || '%' or $1 is NULL)
OR (last_name ILIKE '%' || $1 || '%' or $1 is NULL)
`

func (q *Queries) CountUsers(ctx context.Context, query sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO USERS (id, created_at, updated_at, first_name, last_name, email)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FirstName sql.NullString
	LastName  sql.NullString
	Email     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users 
WHERE id = $1
RETURNING id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role FROM USERS WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
	)
	return i, err
}

const listRecentUsers = `-- name: ListRecentUsers :many
SELECT id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role FROM users 
ORDER BY users.updated_at DESC
LIMIT $1 OFFSET $2
`

type ListRecentUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListRecentUsers(ctx context.Context, arg ListRecentUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listRecentUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.EmailVerified,
			&i.Name,
			&i.Image,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
WITH filtered_users AS (
  SELECT id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role
  FROM users
  WHERE (
    CASE WHEN $5 IS NOT NULL THEN
      email ILIKE '%' || $5 || '%' OR
      first_name ILIKE '%' || $5 || '%' OR
      last_name ILIKE '%' || $5 || '%'
    ELSE true END
  )
)
SELECT 
  count(*) OVER() as total_count,
  id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role
FROM filtered_users
ORDER BY
  CASE 
    WHEN $3::varchar = 'id' AND $4::varchar = 'ASC' THEN id
  END ASC NULLS LAST,
  CASE 
    WHEN $3::varchar = 'id' AND $4::varchar = 'DESC' THEN id
  END DESC NULLS LAST,
  CASE 
    WHEN $3::varchar = 'created_at' AND $4::varchar = 'ASC' THEN created_at
  END ASC NULLS LAST,
  CASE 
    WHEN $3::varchar = 'created_at' AND $4::varchar = 'DESC' THEN created_at
  END DESC NULLS LAST,
  CASE 
    WHEN $3::varchar = 'updated_at' AND $4::varchar = 'ASC' THEN updated_at
  END ASC NULLS LAST,
  CASE 
    WHEN $3::varchar = 'updated_at' AND $4::varchar = 'DESC' THEN updated_at
  END DESC NULLS LAST,
  CASE 
    WHEN $3::varchar = 'last_name' AND $4::varchar = 'ASC' THEN last_name
  END ASC NULLS LAST,
  CASE 
    WHEN $3::varchar = 'last_name' AND $4::varchar = 'DESC' THEN last_name
  END DESC NULLS LAST,
  CASE 
    WHEN $3::varchar = 'first_name' AND $4::varchar = 'ASC' THEN first_name
  END ASC NULLS LAST,
  CASE 
    WHEN $3::varchar = 'first_name' AND $4::varchar = 'DESC' THEN first_name
  END DESC NULLS LAST,
  id ASC  -- Default sort for stable pagination
LIMIT $1 
OFFSET $2
`

type ListUsersParams struct {
	Limit    int32
	Offset   int32
	OrderBy  string
	OrderDir string
	Query    interface{}
}

type ListUsersRow struct {
	TotalCount    int64
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	FirstName     sql.NullString
	LastName      sql.NullString
	Email         string
	EmailVerified sql.NullTime
	Name          sql.NullString
	Image         sql.NullString
	Role          string
}

// Retrieves a paginated list of users with optional filtering and sorting.
// Parameters:
//
//	query: Search term for filtering (optional)
//	order_by: Column name for sorting (id, created_at, updated_at, last_name, first_name)
//	order_dir: Sort direction (ASC or DESC)
//	limit: Maximum number of records to return
//	offset: Number of records to skip
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers,
		arg.Limit,
		arg.Offset,
		arg.OrderBy,
		arg.OrderDir,
		arg.Query,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.EmailVerified,
			&i.Name,
			&i.Image,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET updated_at = $2, 
first_name = $3,
last_name = $4,
email = $5
WHERE ID = $1
RETURNING id, created_at, updated_at, first_name, last_name, email, "emailVerified", name, image, role
`

type UpdateUserParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	FirstName sql.NullString
	LastName  sql.NullString
	Email     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.UpdatedAt,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.EmailVerified,
		&i.Name,
		&i.Image,
		&i.Role,
	)
	return i, err
}
