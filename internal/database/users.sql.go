// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO USERS (id, created_at, updated_at, first_name, last_name, email)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, first_name, last_name, email
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FirstName sql.NullString
	LastName  sql.NullString
	Email     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
DELETE FROM users 
WHERE id = $1
RETURNING id, created_at, updated_at, first_name, last_name, email
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, first_name, last_name, email FROM USERS WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, first_name, last_name, email FROM USERS WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT count(*) OVER(), id, created_at, updated_at, first_name, last_name, email FROM users 
WHERE (email ILIKE '%' || $3 || '%' or $3 is NULL)
OR (first_name ILIKE '%' || $3 || '%' or $3 is NULL)
OR (last_name ILIKE '%' || $3 || '%' or $3 is NULL)
ORDER BY
CASE WHEN ($4::varchar = 'id' AND $5::varchar = 'ASC') THEN id END ASC,
CASE WHEN ($4::varchar = 'id' AND $5::varchar = 'DESC') THEN id END DESC,
CASE WHEN ($4::varchar = 'created_at' AND $5::varchar = 'ASC') THEN created_at END ASC,
CASE WHEN ($4::varchar = 'created_at' AND $5::varchar = 'DESC') THEN created_at END DESC,
CASE WHEN ($4::varchar = 'updated_at' AND $5::varchar = 'ASC') THEN updated_at END ASC,
CASE WHEN ($4::varchar = 'updated_at' AND $5::varchar = 'DESC') THEN updated_at END DESC,
CASE WHEN ($4::varchar = 'last_name' AND $5::varchar = 'ASC') THEN last_name END ASC,
CASE WHEN ($4::varchar = 'last_name' AND $5::varchar = 'DESC') THEN last_name END DESC,
CASE WHEN ($4::varchar = 'first_name' AND $5::varchar = 'ASC') THEN first_name END ASC,
CASE WHEN ($4::varchar = 'first_name' AND $5::varchar = 'DESC') THEN first_name END DESC,
id ASC 
LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit    int32
	Offset   int32
	Query    sql.NullString
	OrderBy  string
	OrderDir string
}

type GetUsersRow struct {
	Count     int64
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FirstName sql.NullString
	LastName  sql.NullString
	Email     string
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers,
		arg.Limit,
		arg.Offset,
		arg.Query,
		arg.OrderBy,
		arg.OrderDir,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByCompany = `-- name: GetUsersByCompany :many
SELECT users.id, users.created_at, users.updated_at, first_name, last_name, email, companies.id, companies.created_at, companies.updated_at, name FROM users 
LEFT JOIN companies 
ON users.assigned_to = users.id
ORDER BY users.name ASC
`

type GetUsersByCompanyRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	FirstName   sql.NullString
	LastName    sql.NullString
	Email       string
	ID_2        uuid.NullUUID
	CreatedAt_2 sql.NullTime
	UpdatedAt_2 sql.NullTime
	Name        sql.NullString
}

func (q *Queries) GetUsersByCompany(ctx context.Context) ([]GetUsersByCompanyRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByCompany)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByCompanyRow
	for rows.Next() {
		var i GetUsersByCompanyRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT count(*) FROM users 
WHERE (first_name ILIKE '%' || $1 || '%' or $1 is NULL)
OR (last_name ILIKE '%' || $1 || '%' or $1 is NULL)
`

func (q *Queries) GetUsersCount(ctx context.Context, query sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUsersCount, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUsersLatest = `-- name: GetUsersLatest :many
SELECT id, created_at, updated_at, first_name, last_name, email FROM users 
ORDER BY users.updated_at DESC
LIMIT $1 OFFSET $2
`

type GetUsersLatestParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsersLatest(ctx context.Context, arg GetUsersLatestParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersLatest, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET updated_at = $2, 
first_name = $3,
last_name = $4,
email = $5
WHERE ID = $1
RETURNING id, created_at, updated_at, first_name, last_name, email
`

type UpdateUserParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	FirstName sql.NullString
	LastName  sql.NullString
	Email     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.UpdatedAt,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}
