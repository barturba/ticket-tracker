// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: companies.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (id, created_at, updated_at, name)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, name
`

type CreateCompanyParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteCompanyByID = `-- name: DeleteCompanyByID :one
DELETE FROM companies 
WHERE id = $1
RETURNING id, created_at, updated_at, name
`

func (q *Queries) DeleteCompanyByID(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRowContext(ctx, deleteCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getCompanies = `-- name: GetCompanies :many
SELECT id, created_at, updated_at, name FROM companies
WHERE (name ILIKE '%' || $3 || '%' or $3 is NULL)
ORDER BY companies.updated_at DESC
LIMIT $1 OFFSET $2
`

type GetCompaniesParams struct {
	Limit  int32
	Offset int32
	Query  sql.NullString
}

func (q *Queries) GetCompanies(ctx context.Context, arg GetCompaniesParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies, arg.Limit, arg.Offset, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompaniesCount = `-- name: GetCompaniesCount :one
SELECT count(*) FROM companies
WHERE (name ILIKE '%' || $1 || '%' or $1 is NULL)
`

func (q *Queries) GetCompaniesCount(ctx context.Context, query sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCompaniesCount, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, created_at, updated_at, name from companies
WHERE id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies 
SET updated_at = $2, 
name = $3
WHERE ID = $1
RETURNING id, created_at, updated_at, name
`

type UpdateCompanyParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, updateCompany, arg.ID, arg.UpdatedAt, arg.Name)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
