// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: companies.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (id, created_at, updated_at, name, organization_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, organization_id
`

type CreateCompanyParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Name           string
	OrganizationID uuid.UUID
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.OrganizationID,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.OrganizationID,
	)
	return i, err
}

const getCompaniesByOrganizationID = `-- name: GetCompaniesByOrganizationID :many
SELECT id, created_at, updated_at, name, organization_id from companies
WHERE organization_id = $1
`

func (q *Queries) GetCompaniesByOrganizationID(ctx context.Context, organizationID uuid.UUID) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompaniesByOrganizationID, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
