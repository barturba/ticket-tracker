// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: configuration_items.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCIs = `-- name: CreateCIs :one
INSERT INTO configuration_items (id, created_at, updated_at, name)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, name
`

type CreateCIsParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateCIs(ctx context.Context, arg CreateCIsParams) (ConfigurationItem, error) {
	row := q.db.QueryRowContext(ctx, createCIs,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i ConfigurationItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteCIs = `-- name: DeleteCIs :one
DELETE FROM configuration_items 
WHERE id = $1
RETURNING id, created_at, updated_at, name
`

func (q *Queries) DeleteCIs(ctx context.Context, id uuid.UUID) (ConfigurationItem, error) {
	row := q.db.QueryRowContext(ctx, deleteCIs, id)
	var i ConfigurationItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getCIs = `-- name: GetCIs :many
SELECT count(*) OVER(), id, created_at, updated_at, name FROM configuration_items 
WHERE (name ILIKE '%' || $3 || '%' or $3 is NULL)
ORDER BY
CASE WHEN ($4::varchar = 'id' AND $5::varchar = 'ASC') THEN id END ASC,
CASE WHEN ($4::varchar = 'id' AND $5::varchar = 'DESC') THEN id END DESC,
CASE WHEN ($4::varchar = 'created_at' AND $5::varchar = 'ASC') THEN created_at END ASC,
CASE WHEN ($4::varchar = 'created_at' AND $5::varchar = 'DESC') THEN created_at END DESC,
CASE WHEN ($4::varchar = 'updated_at' AND $5::varchar = 'ASC') THEN updated_at END ASC,
CASE WHEN ($4::varchar = 'updated_at' AND $5::varchar = 'DESC') THEN updated_at END DESC,
CASE WHEN ($4::varchar = 'name' AND $5::varchar = 'ASC') THEN name END ASC,
CASE WHEN ($4::varchar = 'name' AND $5::varchar = 'DESC') THEN name END DESC,
id ASC 
LIMIT $1 OFFSET $2
`

type GetCIsParams struct {
	Limit    int32
	Offset   int32
	Query    sql.NullString
	OrderBy  string
	OrderDir string
}

type GetCIsRow struct {
	Count     int64
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) GetCIs(ctx context.Context, arg GetCIsParams) ([]GetCIsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCIs,
		arg.Limit,
		arg.Offset,
		arg.Query,
		arg.OrderBy,
		arg.OrderDir,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCIsRow
	for rows.Next() {
		var i GetCIsRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCIsByID = `-- name: GetCIsByID :one
SELECT id, created_at, updated_at, name FROM configuration_items
WHERE id = $1
`

func (q *Queries) GetCIsByID(ctx context.Context, id uuid.UUID) (ConfigurationItem, error) {
	row := q.db.QueryRowContext(ctx, getCIsByID, id)
	var i ConfigurationItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getCIsCount = `-- name: GetCIsCount :one
SELECT count(*) FROM configuration_items 
WHERE (name ILIKE '%' || $1 || '%' or $1 is NULL)
`

func (q *Queries) GetCIsCount(ctx context.Context, query sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCIsCount, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCIsLatest = `-- name: GetCIsLatest :many
SELECT id, created_at, updated_at, name FROM configuration_items 
ORDER BY configuration_items.updated_at DESC
LIMIT $1 OFFSET $2
`

type GetCIsLatestParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetCIsLatest(ctx context.Context, arg GetCIsLatestParams) ([]ConfigurationItem, error) {
	rows, err := q.db.QueryContext(ctx, getCIsLatest, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ConfigurationItem
	for rows.Next() {
		var i ConfigurationItem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCIs = `-- name: UpdateCIs :one
UPDATE configuration_items
SET name = $2,
updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, name
`

type UpdateCIsParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateCIs(ctx context.Context, arg UpdateCIsParams) (ConfigurationItem, error) {
	row := q.db.QueryRowContext(ctx, updateCIs, arg.ID, arg.Name, arg.UpdatedAt)
	var i ConfigurationItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
