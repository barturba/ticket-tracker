package views

import (
"fmt"
"github.com/barturba/ticket-tracker/models"
)

templ IncidentFormIndex(incident models.Incident, companies []models.Company, cis []models.ConfigurationItem) {
<div class="max-w-[100vw] px-6 pb-16">
    <form>
        <div class="form-group">
            <label for="companies">Companies</label>
            <select class="w-full select select-bordered" name="company_id" hx-get="/configuration-items"
                aria-describedby="companiesHelp" hx-target="#configurationItems" hx-push-url="false">
                for _, company := range companies{
                <option value={company.ID.String()}>{ company.Name }</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="configurationItems">Configuration Items</label>
            <select id="configurationItems" class="w-full select select-bordered" name="configuration_item_id"
                aria-describedby="configurationItemsHelp" hx-target="#configurationItems">
                for _, configurationItem := range cis{
                <option value={configurationItem.ID.String()}>{ configurationItem.Name }</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="shortDescription">Short Description</label>
            <input name="short_description" type="text" class="w-full input input-bordered" id="shortDescription"
                aria-describedby="shortDescriptionHelp" placeholder="Enter short description"
                value={incident.ShortDescription}>
            <small id="shortDescriptionHelp" class="form-text text-muted">Enter the short description here.</small>
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <textarea name="description" class="w-full input input-bordered" id="description"
                rows="3">{incident.Description}</textarea>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>
}

templ IncidentsNewIndex(companies []models.Company, cis []models.ConfigurationItem) {
<h1 class="mb-8 text-2xl font-bold text-center">
    New Incident
</h1>
<form hx-post={"/incidents"} hx-ext="json-enc" hx-push-url="true" hx-target="body" hx-swap="innerHTML">
    @IncidentFormIndex(models.Incident{}, companies, cis)
</form>
}

templ IncidentsEditIndex(incident models.Incident, companies []models.Company, cis []models.ConfigurationItem) {
<h1 class="mb-8 text-2xl font-bold text-center">
    Edit Incident
</h1>
<form hx-put={"/incidents/"+incident.ID.String()} hx-ext="json-enc" hx-push-url="true" hx-target="body"
    hx-swap="innerHTML">
    @IncidentFormIndex(incident, companies, cis)
</form>
}

templ IncidentsEdit(page string,
fromProtected, isError bool,
msg,
username,
email string,
menuItems models.MenuItems,
profileItems models.MenuItems,
cmp templ.Component) {
@Layout(page, fromProtected, isError, msg, username, email, menuItems, profileItems) {
@cmp
}
}

templ IncidentsIndex(incidents []models.Incident) {
<div id="wrapper"></div>
<script>
    const css = window.emotion.css;
    new gridjs.Grid({
        sort: true,
        columns: [{ name: "ID", sort: false }, "State", "Short Description", "Assigned To", "Configuration Item"],
        server: {
            url: '/search-incidents',
            then: data => data.results.map(incident =>
                [gridjs.html(`<a href="/incidents/${incident.id}/edit">${incident.id}</a>`),
                incident.state,
                incident.short_description,
                incident.assigned_to_name,
                incident.configuration_item,
                ]
            ),
            total: data => data.count
        },
        sort: {
            multiColumn: false,
            server: {
                url: (prev, columns) => {
                    if (!columns.length) return prev;

                    const col = columns[0];
                    const dir = col.direction === 1 ? 'asc' : 'desc';
                    let colName = ['state', 'short_description'][col.index];

                    return `${prev}&order=${colName}&dir=${dir}`;
                }
            }
        },
        search: {
            enabled: true,
            server: {
                url: (prev, keyword, page) => `${prev}?search=${keyword}`
            }
        },
        pagination: {
            enabled: true,
            limit: 10,
            server: {
                url: (prev, page, limit) => `${prev}${prev.includes('?') ? '&' : '?'}limit=${limit}&offset=${page * limit}`
            }
        },
        className: {
            table: css`
              tr:hover td {
                background-color: rgba(0, 0, 0, 0.1);
              }
            `,
        },
    }).render(document.getElementById("wrapper"));
</script>
}

templ IncidentRow(incident models.Incident) {
<tr>
    <td>{incident.ID.String()}</td>
    <td>{fmt.Sprintf("%v", incident.State)}</td>
    <td>{incident.ShortDescription}</td>
    <td>{incident.AssignedToName}</td>
    <td>{incident.ConfigurationItemName}</td>
    <td>{incident.Description}</td>
    <td>
        <a class="btn danger" href={templ.SafeURL("/incidents/" + incident.ID.String() + "/edit" )}>Edit</a>
    </td>
</tr>
}


templ IncidentsList(page string,
fromProtected, isError bool,
msg,
username,
email string,
menuItems models.MenuItems,
profileItems models.MenuItems,
cmp templ.Component) {
@Layout(page, fromProtected, isError, msg, username, email, menuItems, profileItems) {
@cmp
}
}