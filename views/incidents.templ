package views

import (
"fmt"
"github.com/barturba/ticket-tracker/models"
)

templ IncidentFormIndex(incident models.Incident, companies []models.Company, cis []models.ConfigurationItem) {
<div class="max-w-[100vw] px-6 pb-16">
    <form>
        <div class="form-group">
            <label for="companies">Companies</label>
            <select class="w-full select select-bordered" name="company_id" hx-get="/configuration-items"
                aria-describedby="companiesHelp" hx-target="#configurationItems" hx-push-url="false">
                for _, company := range companies{
                <option value={company.ID.String()}>{ company.Name }</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="configurationItems">Configuration Items</label>
            <select id="configurationItems" class="w-full select select-bordered" name="configuration_item_id"
                aria-describedby="configurationItemsHelp" hx-target="#configurationItems">
                for _, configurationItem := range cis{
                <option value={configurationItem.ID.String()}>{ configurationItem.Name }</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="shortDescription">Short Description</label>
            <input name="short_description" type="text" class="w-full input input-bordered" id="shortDescription"
                aria-describedby="shortDescriptionHelp" placeholder="Enter short description"
                value={incident.ShortDescription}>
            <small id="shortDescriptionHelp" class="form-text text-muted">Enter the short description here.</small>
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <textarea name="description" class="w-full input input-bordered" id="description"
                rows="3">{incident.Description}</textarea>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>
}

templ IncidentsNewIndex(companies []models.Company, cis []models.ConfigurationItem) {
<h1 class="mb-8 text-2xl font-bold text-center">
    New Incident
</h1>
<form hx-post={"/incidents"} hx-ext="json-enc" hx-push-url="true" hx-target="body" hx-swap="innerHTML">
    @IncidentFormIndex(models.Incident{}, companies, cis)
</form>
}

templ IncidentsEditIndex(incident models.Incident, companies []models.Company, cis []models.ConfigurationItem) {
<h1 class="mb-8 text-2xl font-bold text-center">
    Edit Incident
</h1>
<form hx-put={"/incidents/"+incident.ID.String()} hx-ext="json-enc" hx-push-url="true" hx-target="body"
    hx-swap="innerHTML">
    @IncidentFormIndex(incident, companies, cis)
</form>
}

templ FormSection(title, description string) {
<div class="pb-12 border-b border-gray-900/10">
    <h2 class="text-base font-semibold leading-7 text-gray-900">{title}</h2>
    <p class="mt-1 text-sm leading-6 text-gray-600">{description}</p>

    <div class="grid grid-cols-1 mt-10 gap-x-6 gap-y-8 sm:grid-cols-6">
        {children...}
    </div>
</div>
}

templ FormInput3(id, title, autocomplete, inputType string ) {
<div class="sm:col-span-3">
    <label for={id} class="block text-sm font-medium leading-6 text-gray-900">{title}</label>
    <div class="mt-2">
        <input type={inputType} name={id} id={id} autocomplete={autocomplete}
            class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-800 sm:text-sm sm:leading-6">
    </div>
</div>
}

templ FormInput3Disabled(id, title, autocomplete, inputType, placeholder string) {
<div class="sm:col-span-3">
    <label for={id} class="block text-sm font-medium leading-6 text-gray-900">{title}</label>
    <div class="mt-2">
        <input type={inputType} name={id} id={id} autocomplete={autocomplete} disabled
            class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500 disabled:ring-gray-200 sm:text-sm sm:leading-6"
            placeholder={placeholder}>
    </div>
</div>
}

templ FormInput4(id, title, autocomplete, inputType, value string) {

<div class="sm:col-span-4">
    <label for={id} class="block text-sm font-medium leading-6 text-gray-900">{title}</label>
    <div class="mt-2">
        <input id={id} name={id} type={inputType} autocomplete={inputType}
            class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-800 sm:text-sm sm:leading-6"
            value={value}>
    </div>
</div>
}

templ FormSelect3(id, title, autocomplete, selected string, selectOptions models.SelectOptions) {
<div class="sm:col-span-3">
    <label for={id} class="block text-sm font-medium leading-6 text-gray-900">{title}</label>
    <div class="mt-2">
        <select id={id} name={id} autocomplete={autocomplete}
            class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-gray-800 sm:max-w-xs sm:text-sm sm:leading-6">
            for _, option := range selectOptions {
            if selected == option.Link {
            <option value={option.Link} selected={option.Link}>{ option.Name }</option>
            } else {
            <option value={option.Link}>{ option.Name }</option>
            }
            }
        </select>
    </div>
</div>
}

templ FormTextAreaFull(id, title, description, value string) {
<div class="col-span-full">
    <label for={id} class="block text-sm font-medium leading-6 text-gray-900">{title}</label>
    <div class="mt-2">
        <textarea id={id} name={id} rows="3"
            class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">{value}</textarea>
    </div>
    <p class="mt-3 text-sm leading-6 text-gray-600">{description}</p>
</div>
}

templ ButtonsCancelSave() {
<div class="flex items-center justify-end mt-6 gap-x-6">
    <button type="button" class="text-sm font-semibold leading-6 text-gray-900">Cancel</button>
    <button type="submit"
        class="px-3 py-2 text-sm font-semibold text-white bg-indigo-600 rounded-md shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Save</button>
</div>
}

templ IncidentFormNew(selectOptionsCompany, selectOptionsCI models.SelectOptions, incident models.Incident) {
@FormNew("/incidents") {
@FormSection("Incident", "Incident information") {

@FormInput3Disabled("incident_id", "Incident ID", "", "text", incident.ID.String())
@FormSelect3("company_id", "Company", "company-name", incident.CompanyID.String(), selectOptionsCompany, )
@FormSelect3("configuration_item_id", "Configuration Item", "", incident.ConfigurationItemID.String(), selectOptionsCI )
@FormInput4("short_description", "Short Description", "", "text", incident.ShortDescription)
@FormTextAreaFull("description", "Description", "Write a description here", incident.Description)
}
}
}

templ FormNew(postURL string) {
<form hx-post={postURL} hx-ext="json-enc" hx-push-url="true" hx-swap="innerHTML">
    <div class="space-y-12">
        {children...}
    </div>
    @ButtonsCancelSave()
</form>
}

templ IncidentsEdit(page, logo string,
fromProtected, isError bool,
msg,
username,
email,
profilePic string,
menuItems models.MenuItems,
profileItems models.MenuItems,
cmp templ.Component) {
// @InnerLayout(page, logo, fromProtected, isError, msg, username, email, profilePic, menuItems, profileItems) {
@InnerLayout(page) {
@cmp
}
}

templ TableHeader() {
<div class="sm:flex sm:items-center">
    <div class="sm:flex-auto">
        <h1 class="text-base font-semibold leading-6 text-gray-900">Users</h1>
        <p class="mt-2 text-sm text-gray-700">A list of all the users in your account including their name, title,
            email and role.</p>
    </div>
    <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
        <button type="button"
            class="block px-3 py-2 text-sm font-semibold text-center text-white bg-indigo-600 rounded-md shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Add
            user</button>
    </div>
</div>
}

templ TableRowHeadFirst(text string) {
<th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-0">{text}</th>
}

templ TableRowHead(text string) {
<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">{text}</th>
}

templ TableHead() {
<thead>
    <tr>
        {children...}
    </tr>
</thead>

}
templ TableBody() {
<tbody class="divide-y divide-gray-200">
    {children...}
</tbody>
}
templ TableWrapper() {
<div class="px-4 sm:px-6 lg:px-8">
    {children...}
</div>
}


templ TableDataFirst(text string) {
<td class="py-4 pl-4 pr-3 text-sm font-medium text-gray-900 whitespace-nowrap sm:pl-0">{text}</td>
}
templ TableData(text string) {
<td class="px-3 py-4 text-sm text-gray-500 whitespace-nowrap">{text}</td>
}

templ TableDataLink(text, link string) {
<td class="relative py-4 pl-3 pr-4 text-sm font-medium text-right whitespace-nowrap sm:pr-0">
    <button hx-get={"/incidents/"+link+"/edit"} hx-target="#incident-wrapper" hx-push-url="true" hx-swap="outerHTML"
        class="text-indigo-600 hover:text-indigo-900">{text}</button>
</td>
}
templ IncidentTable(incidents []models.Incident) {
@TableWrapper(){
@TableHeader()
<div class="flow-root mt-8">
    <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
        <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
            <table class="min-w-full divide-y divide-gray-300">
                @TableHead(){
                @TableRowHeadFirst("ID")
                @TableRowHead("State")
                @TableRowHead("Short Description")
                @TableRowHead("Assigned To")
                @TableRowHead("Configuration Item")
                }
                @TableBody() {
                for _, incident := range incidents{
                <tr>
                    @TableDataFirst(incident.ID.String())
                    @TableData(fmt.Sprintf("%s", incident.State))
                    @TableData(incident.ShortDescription)
                    @TableData(incident.AssignedToName)
                    @TableData(incident.ConfigurationItemName)
                    @TableDataLink("Edit", incident.ID.String())
                </tr>
                }
                }
            </table>
        </div>
    </div>
</div>
}
}

templ IncidentsIndex(incidents []models.Incident) {
<div id="incident-wrapper">
    @IncidentTable(incidents)
</div>
}


templ IncidentsIndexOption1(incidents []models.Incident) {


<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
    <table class="w-full text-sm text-left text-gray-500 rtl:text-right dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="px-6 py-3">
                    Product name
                </th>
                <th scope="col" class="px-6 py-3">
                    Color
                </th>
                <th scope="col" class="px-6 py-3">
                    Category
                </th>
                <th scope="col" class="px-6 py-3">
                    Price
                </th>
                <th scope="col" class="px-6 py-3">
                    <span class="sr-only">Edit</span>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                    Apple MacBook Pro 17"
                </th>
                <td class="px-6 py-4">
                    Silver
                </td>
                <td class="px-6 py-4">
                    Laptop
                </td>
                <td class="px-6 py-4">
                    $2999
                </td>
                <td class="px-6 py-4 text-right">
                    <a href="#" class="font-medium text-blue-600 dark:text-blue-500 hover:underline">Edit</a>
                </td>
            </tr>
            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                    Microsoft Surface Pro
                </th>
                <td class="px-6 py-4">
                    White
                </td>
                <td class="px-6 py-4">
                    Laptop PC
                </td>
                <td class="px-6 py-4">
                    $1999
                </td>
                <td class="px-6 py-4 text-right">
                    <a href="#" class="font-medium text-blue-600 dark:text-blue-500 hover:underline">Edit</a>
                </td>
            </tr>
            <tr class="bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-600">
                <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                    Magic Mouse 2
                </th>
                <td class="px-6 py-4">
                    Black
                </td>
                <td class="px-6 py-4">
                    Accessories
                </td>
                <td class="px-6 py-4">
                    $99
                </td>
                <td class="px-6 py-4 text-right">
                    <a href="#" class="font-medium text-blue-600 dark:text-blue-500 hover:underline">Edit</a>
                </td>
            </tr>
        </tbody>
    </table>
</div>

}

templ IncidentsIndexOld(incidents []models.Incident) {
<div id="incident-wrapper">
    <button class="font-medium text-gray-600 hover:text-gray-900"
        hx-get="/incidents/164dadd3-cfde-4591-90a4-6004e93294eb/edit" hx-target="#incident-wrapper" hx-push-url="true"
        hx-swap="outerHTML">164dadd3-cfde-4591-90a4-6004e93294eb</button>
    <div id="wrapper"></div>
    <script>
        new gridjs.Grid({
            sort: true,
            columns: [{
                name: "ID", sort: false,
                formatter: (_, row) => gridjs.html(`<button class="font-medium text-gray-600 hover:text-gray-900" hx-get="/incidents/${row.cells[0].data}/edit">${row.cells[0].data}</button>`)
            }, "State", "Short Description", "Assigned To", "Configuration Item"],
            server: {
                url: '/search-incidents',
                then: data => data.results.map(incident =>
                    [
                        incident.id,
                        incident.state,
                        incident.short_description,
                        incident.assigned_to_name,
                        incident.configuration_item,
                    ]
                ),
                total: data => data.count
            },
            sort: {
                multiColumn: false,
                server: {
                    url: (prev, columns) => {
                        if (!columns.length) return prev;

                        const col = columns[0];
                        const dir = col.direction === 1 ? 'asc' : 'desc';
                        let colName = ['state', 'short_description'][col.index];

                        return `${prev}&order=${colName}&dir=${dir}`;
                    }
                }
            },
            search: {
                enabled: true,
                server: {
                    url: (prev, keyword, page) => `${prev}?search=${keyword}`
                }
            },
            pagination: {
                enabled: true,
                limit: 10,
                server: {
                    url: (prev, page, limit) => `${prev}${prev.includes('?') ? '&' : '?'}limit=${limit}&offset=${page * limit}`
                }
            },
            className: {
                table: css`
              tr:hover td {
                background-color: rgba(0, 0, 0, 0.1);
              }
            `,
            },
        }).render(document.getElementById("wrapper"));
    </script>
</div>
}


templ IncidentsList(page, logo string,
fromProtected, isError bool,
msg,
username,
email,
profilePic string,
menuItems models.MenuItems,
profileItems models.MenuItems,
cmp templ.Component) {
@Layout(page, logo, fromProtected, isError, msg, username, email, profilePic, menuItems, profileItems) {
@cmp
}
}